version: '3.8'
services:
#1. httpd -> apache for mock website http://shanghai3721.ml/httpd/
#--> Working
    httpd:
        image: httpd:alpine
        container_name: httpd
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose:
            - 80
        volumes: 
            - ./httpd/html6/:/usr/local/apache2/htdocs/
            - ./httpd/conf/:/usr/local/apache2/conf/
        networks:
            - net
#2. Nginx -> proxy server
#--> Working
# listen 80, 31300 --> Mock website https://shanghai3721.ml
# proxy pass
# /grafana/ --> proxy_pass http://grafana:3000/;
# /httpd/ --> proxy_pass http://httpd:80/;
# /portainer/ --> proxy_pass http://portainer:9000/;
# /jenkins/ --> proxy_pass http://jenkins:8080/jenkins/;
# /tomcat/ --> proxy_pass http://tomcat:8080/;
# /adminer/ --> proxy_pass http://adminer:8080/;
    nginx:
        image: nginx:alpine
        container_name: nginx
        labels:
            - sh.acme.autoload.domain=k8s-master.ml
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose:
            - 31300
        ports:
            - 80:80
        volumes: 
            - ./nginx/conf.d:/etc/nginx/conf.d
            - ./nginx/html:/usr/share/nginx/html
            - ./nginx/error.log:/var/log/nginx/error.log
            - ./nginx/access.log:/var/log/nginx/access.log
        networks: 
            - net
#3. trojan go -> fuck GFW
#--> Working
    trojan-go:
        image: p4gefau1t/trojan-go:latest
        container_name: trojan-go
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose:
            - 31296
        volumes:
            - ./trojan-go:/etc/trojan-go
        networks: 
            - net
#        depends_on:
#            - nginx
#4. xray -> fuck GFW * Proxy Server
# VLESS_XTLS/TLS-direct_TCP
# VLESS_WS
#--> Working
    xray:
        image: teddysun/xray:latest
        container_name: xray
        restart: always
        environment: 
            TZ: Asia/Shanghai
        ports: 
            - 443:443
        volumes: 
            - ./xray:/etc/xray
        networks: 
            - net
#        depends_on:
#            - nginx
    #6. prometheus -> monitor virtual machines
    #--> Working
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose: 
            - 9090
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml 
            - ./prometheus/groups/:/root/prometheus/groups/
            - ./prometheus/groups/:/usr/local/prometheus/groups/ 
            - ./prometheus/rules/:/root/prometheus/rules/
            - ./prometheus/groups/:/usr/local/prometheus/rules/ 
        networks: 
            - net
    #7. alertmanager -> alter users
    #--> NOT working
    alertmanager:
        image: prom/alertmanager:latest
        container_name: alertmanager
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose:
            - 9093
        volumes:
            - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        networks: 
            - net
    #8. grafana -> monitor UI
    #--> Working
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: always
        environment: 
        #https://grafana.com/docs/grafana/latest/administration/configuration/
        #GF_<SectionName>_<KeyName>
            TZ: Asia/Shanghai
        #    GF_PATHS_CONFIG: /etc/grafana/grafana.ini
        #    GF_PATHS_DATA: /var/lib/grafana
        #    GF_PATHS_HOME: /usr/share/grafana
        #    GF_PATHS_LOGS: /var/log/grafana
        #    GF_PATHS_PLUGINS: /var/lib/grafana/plugins
        #    GF_PATHS_PROVISIONING: /etc/grafana/provisioning
        #    GF_SERVER_PROTOCOL: https
            GF_SERVER_PROTOCOL: http
            GF_SERVER_HTTP_PORT: 3000
            GF_SERVER_DOMAIN: k8s-master.ml
            GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
            GF_SERVER_SERVE_FROM_SUB_PATH: "true"
        #    GF_SECURITY_ADMIN_PASSWORD: etL#flk*r4KDo$32Ulfe$%3

            GF_SERVER_ENABLE_GZIP: 'true'
            GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
            GF_USERS_ALLOW_SIGN_UP: 'true'
            GF_USERS_VIEWERS_CAN_EDIT: 'true'
            GF_AUTH_ANONYMOUS_ENABLED: 'true'
            GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
            GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
            GF_ANALYTICS_REPORTING_ENABLED: 'false'
            GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
        #    ROUSER: ocean  # read-only user name for postgres
        #    ROPASSWORD__FILE: /run/secrets/postgres_ro_password  # postgres read-only user password
            
        #    GF_SERVER_CERT_FILE: /etc/grafana/shanghai3721.ml.crt
        #    GF_SERVER_CERT_KEY: /etc/grafana/shanghai3721.ml.key
        secrets:
            - grafana_admin_password
        volumes:
            - ./grafana/:/etc/grafana/
            - ./grafana/:/var/lib/grafana 
        expose:
            - 3000
        networks: 
            - net
    #9. cadvisor -> container advisor / monitor  
    #--> Working      
    cadvisor:
        image: google/cadvisor:latest
        container_name: cadvisor
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose: 
            - 8080
        volumes:
            - /:/rootfs
            - /var/run:/var/run
            - /sys:/sys
            - /var/lib/docker/:/var/lib/docker
            - /dev/disk/:/dev/disk
        networks: 
            - net
#11. Portainer -> Docker UI
#--> Working
    portainer:
        image: portainer/portainer-ce:alpine
        container_name: portainer
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose: 
            - 8000
            - 9000
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./portainer/data:/data
        networks: 
            - net     
    #13. mysql ->  Relational Database
    #--> Working
    db:
        image: mysql:latest
        container_name: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        environment: 
            TZ: Asia/Shanghai
            # root
            MYSQL_ROOT_PASSWORD: ABC123abc
        networks: 
            - net
    #14. Adminer -> Database UI
    #--> Working
    adminer:
        image: adminer:latest
        container_name: adminer
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose: 
            - 8080
        networks: 
            - net
networks: 
    net:
        driver: bridge

secrets:
    grafana_admin_password:
        file: ./grafana/grafana_admin_password.txt