version: '3.8'
services:

    httpd:
        build:
            dockerfile: Dockerfile
            context: ./httpd
        container_name: httpd
        restart: always
        environment: 
            TZ: Asia/Shanghai
#        ports: 
#            - 80
        expose: 
            - 80
        volumes: 
            - ./conf.d/httpd/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf
        networks:
            - all-in-one-net

    nginx:
        build:
            dockerfile: Dockerfile
            context: ./nginx
        container_name: nginx
        restart: always
        environment: 
            TZ: Asia/Shanghai
        ports:
            - 80:80
        volumes: 
            - ./conf.d/nginx/conf.d:/etc/nginx/conf.d
            - ./conf.d/nginx/html:/usr/share/nginx/html
            - ./conf.d/nginx/subscribe:/etc/v2ray-agent/subscribe
            - ./conf.d/nginx/nginx_logs:/var/log/nginx
            - ./conf.d/nginx/web_logs:/etc/nginx/logs
            - ./conf.d/tls:/etc/nginx/ssl
        networks: 
            - all-in-one-net
            
    trojan-go:
        build:
            dockerfile: Dockerfile
            context: ./trojan-go
        container_name: trojan-go
        restart: always
        environment: 
            TZ: Asia/Shanghai
#        ports:
#            - 443:443
        expose:
            - 31296
        volumes:
            - ./conf.d/trojan-go:/etc/trojan-go
        networks: 
            - all-in-one-net
#        depends_on:
#            - nginx

    xray:
        build:
            dockerfile: Dockerfile
            context: ./xray
        container_name: xray
        restart: always
        environment: 
            TZ: Asia/Shanghai
        ports: 
            - 443:443
        volumes: 
            - ./conf.d/xray:/etc/xray
        networks: 
            - all-in-one-net
#        depends_on:
#            - nginx

    v2ray:
        build:
            dockerfile: Dockerfile
            context: ./v2ray
        container_name: v2ray
        restart: always
        environment: 
            TZ: Asia/Shanghai
#            TARGETPLATFORM: linux/amd64
#            TAG: 'v4.39.2'
        expose: 
            - 1080
        volumes: 
            - ./conf.d/v2ray:/etc/v2ray
        networks: 
            - all-in-one-net
#        depends_on:
#            - nginx

    prometheus:
        build:
            dockerfile: Dockerfile
            context: ./prometheus
        container_name: prometheus
        restart: always
        environment: 
            TZ: Asia/Shanghai
#        ports:
#            - 9090:9090
        expose: 
            - 9090
        volumes:
            - ./conf.d/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml 
            - ./conf.d/prometheus/groups/:/root/prometheus/groups/
            - ./conf.d/prometheus/groups/:/usr/local/prometheus/groups/ 
            - ./conf.d/prometheus/rules/:/root/prometheus/rules/
            - ./conf.d/prometheus/groups/:/usr/local/prometheus/rules/ 
        networks: 
            - all-in-one-net

    alertmanager:
        build:
            dockerfile: Dockerfile
            context: ./alertmanager
        container_name: alertmanager
        restart: always
        environment: 
            TZ: Asia/Shanghai
#        ports:
#            - 9093:9093
        expose:
            - 9093
        volumes:
            - ./conf.d/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        networks: 
            - all-in-one-net

    grafana:
        build:
            dockerfile: Dockerfile
            context: ./grafana
        container_name: grafana
        restart: always
        environment: 
        #https://grafana.com/docs/grafana/latest/administration/configuration/
        #GF_<SectionName>_<KeyName>
            TZ: Asia/Shanghai
        #    GF_PATHS_CONFIG: /etc/grafana/grafana.ini
        #    GF_PATHS_DATA: /var/lib/grafana
        #    GF_PATHS_HOME: /usr/share/grafana
        #    GF_PATHS_LOGS: /var/log/grafana
        #    GF_PATHS_PLUGINS: /var/lib/grafana/plugins
        #    GF_PATHS_PROVISIONING: /etc/grafana/provisioning
        #    GF_SERVER_PROTOCOL: https
            GF_SERVER_PROTOCOL: http
            GF_SERVER_HTTP_PORT: 3000
            GF_SERVER_DOMAIN: shanghai3721.ml
            GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
            GF_SERVER_SERVE_FROM_SUB_PATH: "true"
        #    GF_SECURITY_ADMIN_PASSWORD: etL#flk*r4KDo$32Ulfe$%3

            GF_SERVER_ENABLE_GZIP: 'true'
            GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
            GF_USERS_ALLOW_SIGN_UP: 'true'
            GF_USERS_VIEWERS_CAN_EDIT: 'true'
            GF_AUTH_ANONYMOUS_ENABLED: 'true'
            GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
            GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
            GF_ANALYTICS_REPORTING_ENABLED: 'false'
            GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
            ROUSER: ocean  # read-only user name for postgres
            ROPASSWORD__FILE: /run/secrets/postgres_ro_password  # postgres read-only user password
            
        #    GF_SERVER_CERT_FILE: /etc/grafana/shanghai3721.ml.crt
        #    GF_SERVER_CERT_KEY: /etc/grafana/shanghai3721.ml.key
        secrets:
            - grafana_admin_password
            - postgres_ro_password
        volumes:
            - ./conf.d/grafana/:/etc/grafana/
            # 持久化配置文件
            - grafana-storage:/var/lib/grafana 
#            - ./conf.d/grafana/data/:/var/lib/grafana/

#            - grafana-config:/etc/grafana
#        ports: 
#            - 3000:3000
        expose:
            - 3000
        networks: 
            - all-in-one-net
        
    cadvisor:
        build:
            dockerfile: Dockerfile
            context: ./cadvisor
        container_name: cadvisor
        restart: always
        environment: 
            TZ: Asia/Shanghai
#        ports: 
#            - 8080:8080
        expose: 
            - 8080
        volumes:
            - /:/rootfs
            - /var/run:/var/run
            - /sys:/sys
            - /var/lib/docker/:/var/lib/docker
            - /dev/disk/:/dev/disk
        networks: 
            - all-in-one-net

    jenkins:
        build:
            dockerfile: Dockerfile
            context: ./jenkins
        container_name: jenkins
        restart: always
        environment: 
            TZ: Asia/Shanghai
        ports: 
            - 8088:8080
        expose: 
            - 50000
        volumes:
            - ./jenkins/jenkins_home:/var/jenkins_home
        networks: 
            - all-in-one-net        

    portainer:
        build:
            dockerfile: Dockerfile
            context: ./portainer
        container_name: portainer
        restart: always
        environment: 
            TZ: Asia/Shanghai
        expose: 
            - 8000
            - 9000
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - portainer_data:/data
        networks: 
            - all-in-one-net     

networks: 
    all-in-one-net:
        driver: bridge

volumes:
    grafana-storage:
#    external: true
    portainer_data:
#  grafana-config:
#    external: true


secrets:
    grafana_admin_password:
        file: ./secrets/grafana_admin_password.txt
    postgres_postgres_password:
        file: ./secrets/postgres_postgres_password.txt
    postgres_ro_password:
        file: ./secrets/postgres_ro_password.txt